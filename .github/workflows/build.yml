name: build

on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ARDUINO_SKETCHBOOK_DIR: ${{ github.workspace }}/.arduino
      FQBN: esp32:esp32:esp32s2
      ESP32_CORE_VER: 2.0.17
      ARDUINO_CLI_VER: 0.35.3

    steps:
      - name: Set up job
        run: |
          set -euxo pipefail
          echo "Workspace: $GITHUB_WORKSPACE"
          mkdir -p "$ARDUINO_SKETCHBOOK_DIR"/{libraries,staging,packages}

      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Arduino-CLI ohne Action, stabil & feste Version ---
      - name: Install Arduino CLI (${{ env.ARDUINO_CLI_VER }})
        run: |
          set -euxo pipefail
          cd /tmp
          curl -fsSL "https://downloads.arduino.cc/arduino-cli/arduino-cli_${ARDUINO_CLI_VER}_Linux_64bit.tar.gz" -o arduino-cli.tgz
          tar -xzf arduino-cli.tgz
          sudo mv arduino-cli /usr/local/bin/arduino-cli
          arduino-cli version

      # --- Index & Core installieren (ESP32 2.0.17) ---
      - name: Add ESP32 package index & core update
        run: |
          set -euxo pipefail
          arduino-cli config init --additional-urls https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
          arduino-cli core update-index
          arduino-cli core install esp32:esp32@${ESP32_CORE_VER}
          arduino-cli core list

      # --- Benötigte Libraries fixiert installieren ---
      - name: Install libraries (fixed set incl. TJpg_Decoder + PNGdec + Async stack)
        run: |
          set -euxo pipefail
          # Adafruit Display-Stack
          arduino-cli lib install "Adafruit GFX Library@1.12.1"
          arduino-cli lib install "Adafruit BusIO@1.17.2"
          arduino-cli lib install "Adafruit ST7735 and ST7789 Library@1.11.0"
          # Networking/Async
          arduino-cli lib install "AsyncTCP@1.1.1"
          arduino-cli lib install "ESP Async WebServer@3.6.0"
          # Decoder
          arduino-cli lib install "TJpg_Decoder@1.1.0"
          arduino-cli lib install "PNGdec@1.1.4"
          # (Board-Core-Libs wie Update, FS, WiFi, SPIFFS kommen mit dem Core)
          arduino-cli lib list

      # --- Kompilieren aller Sketches im Ordner firmware/ ---
      - name: Compile sketches in firmware/
        run: |
          set -euxo pipefail
          # optional: Abhängigkeiten cachen helfen, aber hier explizit schlank
          arduino-cli compile \
            --fqbn "${FQBN}" \
            --warnings default \
            --libraries "$ARduino_SKETCHBOOK_DIR/libraries" \
            --build-path "$GITHUB_WORKSPACE/build" \
            firmware/firmware.ino

      - name: Upload firmware artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ github.sha }}
          path: |
            build/**/*.bin
            build/**/*.elf
          if-no-files-found: warn
