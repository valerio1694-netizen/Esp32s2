name: Build ESP32-S2 (firmware folder)

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      FQBN: esp32:esp32:esp32s2
      ESP32_CORE_VERSION: 2.0.17
      ARDUINO_CLI_VERSION: 0.35.2

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Arduino CLI installieren (fixe Version) ---
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v1
        with:
          version: ${{ env.ARDUINO_CLI_VERSION }}

      # --- Cache für Core/Packages ---
      - name: Cache Arduino core & packages
        uses: actions/cache@v4
        with:
          path: ~/.arduino15
          key: arduino15-${{ runner.os }}-${{ env.ESP32_CORE_VERSION }}

      # --- Cache für Libraries ---
      - name: Cache Arduino libraries
        uses: actions/cache@v4
        with:
          path: ~/Arduino/libraries
          key: arduinolibs-${{ runner.os }}-v3

      # --- ESP32 Core installieren (2.0.17) ---
      - name: Install ESP32 core
        run: |
          set -e
          arduino-cli config init
          arduino-cli config set board_manager.additional_urls https://espressif.github.io/arduino-esp32/package_esp32_index.json
          arduino-cli core update-index
          arduino-cli core install esp32:esp32@${ESP32_CORE_VERSION}
          arduino-cli core list

      # --- Libraries installieren (inkl. Async, JPG, PNG, JSON) ---
      - name: Install libraries
        run: |
          set -e
          # Display
          arduino-cli lib install "Adafruit GFX Library@1.12.1" || true
          arduino-cli lib install "Adafruit BusIO@1.17.2" || true
          arduino-cli lib install "Adafruit ST7735 and ST7789 Library@1.11.0" || true
          # Core/FS/SPI
          arduino-cli lib install "SPI@2.0.0" || true
          arduino-cli lib install "FS@2.0.0" || true
          arduino-cli lib install "SPIFFS@2.0.0" || true
          # Netzwerk/Async/OTA
          arduino-cli lib install "WiFi@2.0.0" || true
          arduino-cli lib install "AsyncTCP@1.1.1" || true
          arduino-cli lib install "ESP Async WebServer@3.6.0" || true
          arduino-cli lib install "Update@2.0.0" || true
          # Decoder
          arduino-cli lib install "TJpg_Decoder" || true
          arduino-cli lib install "PNGdec" || true
          # JSON
          arduino-cli lib install "ArduinoJson@6.21.2" || true

          echo "== Installed libraries =="
          arduino-cli lib list

      # --- Alle .ino unter firmware/ kompilieren ---
      - name: Compile sketches in firmware/
        run: |
          set -e
          shopt -s nullglob
          mapfile -t SKETCHES < <(find firmware -type f -name "*.ino" | sort)
          echo "Gefundene Sketche:"
          printf " - %s\n" "${SKETCHES[@]}"
          mkdir -p build
          for SKETCH in "${SKETCHES[@]}"; do
            NAME=$(basename "${SKETCH%.*}")
            OUTDIR="build/${NAME}"
            mkdir -p "${OUTDIR}"
            echo "==> Compiling: ${SKETCH}"
            arduino-cli compile \
              --fqbn "${FQBN}" \
              --warnings default \
              --export-binaries \
              --output-dir "${OUTDIR}" \
              "${SKETCH}"
          done

      # --- Artefakte hochladen (.bin/.elf) ---
      - name: Upload firmware artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: firmware-binaries
          path: |
            build/**/*.bin
            build/**/*.elf
          if-no-files-found: warn
