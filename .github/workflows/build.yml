name: Build ESP32-S2 firmware

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  FQBN: esp32:esp32:esp32s2

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # Arduino-CLI manuell installieren
      - name: Install Arduino CLI
        run: |
          set -e
          mkdir -p "$HOME/.local/bin"
          curl -fsSL https://downloads.arduino.cc/arduino-cli/arduino-cli_0.35.2_Linux_64bit.tar.gz -o /tmp/arduino-cli.tar.gz
          tar -xzf /tmp/arduino-cli.tar.gz -C /tmp
          install /tmp/arduino-cli "$HOME/.local/bin/arduino-cli"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          arduino-cli version

      - name: Add ESP32 package index & update
        run: |
          arduino-cli config init
          arduino-cli config add board_manager.additional_urls https://espressif.github.io/arduino-esp32/package_esp32_index.json
          arduino-cli core update-index

      # Bewährter ESP32-Core für Async-Webserver
      - name: Install ESP32 core 2.0.17
        run: |
          arduino-cli core install esp32:esp32@2.0.17
          arduino-cli core list

      # *** WICHTIG: RICHTIGE Async-Libs direkt von GitHub (me-no-dev) ***
      - name: Install Async libs from GitHub (me-no-dev)
        run: |
          set -e
          LIBDIR="$HOME/Arduino/libraries"
          mkdir -p "$LIBDIR"
          # Falsche, bereits installierte Async-Libs entfernen (falls vorhanden)
          rm -rf "$LIBDIR/ESP_Async_WebServer" "$LIBDIR/ESP Async WebServer" \
                 "$LIBDIR/ESPAsyncWebServer" "$LIBDIR/AsyncTCP"
          # Richtige Repos klonen
          git clone --depth 1 https://github.com/me-no-dev/ESPAsyncWebServer.git "$LIBDIR/ESPAsyncWebServer"
          git clone --depth 1 https://github.com/me-no-dev/AsyncTCP.git "$LIBDIR/AsyncTCP"
          ls -la "$LIBDIR"

      # Display-Libs aus dem Library-Manager
      - name: Install display libraries
        run: |
          arduino-cli lib install "Adafruit GFX Library@1.12.1"
          arduino-cli lib install "Adafruit BusIO@1.17.2"
          arduino-cli lib install "Adafruit ST7735 and ST7789 Library@1.11.0"

      - name: Compile all .ino sketches
        shell: bash
        run: |
          set -e
          shopt -s nullglob
          mkdir -p build
          mapfile -t INOS < <(find firmware -type f -name "*.ino" | sort)
          if [ ${#INOS[@]} -eq 0 ]; then
            echo "Keine .ino unter firmware/ gefunden."
            exit 1
          fi
          echo "Gefundene Sketche:"
          printf ' - %s\n' "${INOS[@]}"
          for ino in "${INOS[@]}"; do
            base=$(basename "$ino" .ino)
            out="build/$base"
            mkdir -p "$out"
            echo "==> Compiling: $ino"
            arduino-cli compile --fqbn "${FQBN}" --output-dir "$out" "$ino"
          done

      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware-binaries
          path: |
            build/**/*.bin
            build/**/*.elf
          if-no-files-found: warn
