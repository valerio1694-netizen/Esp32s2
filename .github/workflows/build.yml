name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Set up job
        run: echo "Starting build…"

      - name: Checkout repository
        uses: actions/checkout@v4

      # -------- Arduino CLI (gepinnt – Fix für 'unable to get latest version') --------
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v1
        with:
          version: 0.35.2   # <- bewusst gepinnt, stabil auf GH runners

      # -------- Cache: Core & Libs beschleunigen --------
      - name: Cache Arduino core & packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.arduino15
            ~/Arduino/hardware
          key: arduino-core-${{ runner.os }}-v2-${{ hashFiles('**/build.yml') }}

      - name: Cache Arduino libraries
        uses: actions/cache@v4
        with:
          path: |
            ~/Arduino/libraries
          key: arduino-libs-${{ runner.os }}-v3-${{ hashFiles('**/firmware/**/*.ino') }}
          restore-keys: |
            arduino-libs-${{ runner.os }}-v3-

      # -------- ESP32 Core 2.0.17 installieren --------
      - name: Add ESP32 package index & core update
        run: |
          arduino-cli config init
          arduino-cli config add board_manager.additional_urls https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
          arduino-cli core update-index

      - name: Install ESP32 core (2.0.17)
        run: |
          arduino-cli core install esp32:esp32@2.0.17
          arduino-cli board listall | grep -i esp32 || true

      # -------- Bibliotheken (fixe/pin-kompatible Versionen) --------
      - name: Install libraries (fixed, incl. TJpg_Decoder + PNGdec)
        run: |
          set -e
          # Netzwerk/OTA
          arduino-cli lib install "AsyncTCP@1.1.1"
          arduino-cli lib install "ESP Async WebServer@3.6.0"
          arduino-cli lib install "Update"
          arduino-cli lib install "WiFi"
          arduino-cli lib install "FS"
          arduino-cli lib install "SPIFFS"
          # Display
          arduino-cli lib install "Adafruit GFX Library@1.12.1"
          arduino-cli lib install "Adafruit ST7735 and ST7789 Library@1.11.0"
          arduino-cli lib install "Adafruit BusIO@1.17.2"
          arduino-cli lib install "SPI"
          arduino-cli lib install "Wire"
          # Bilddecoder
          arduino-cli lib install "TJpg_Decoder"
          arduino-cli lib install "PNGdec"

      # -------- Kompilieren: alle Sketches in firmware/ --------
      - name: Compile sketches in firmware/
        shell: bash
        run: |
          set -e
          mkdir -p build
          shopt -s nullglob
          for ino in firmware/*.ino; do
            name=$(basename "$ino" .ino)
            out="build/${name}"
            mkdir -p "$out"
            echo "==> Compiling: $ino"
            arduino-cli compile \
              --fqbn esp32:esp32:esp32s2 \
              --build-path "$out" \
              --warnings default \
              "$ino"
          done

      # -------- Artefakte hochladen --------
      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware-binaries
          path: |
            build/**/*.bin
            build/**/*.elf
          if-no-files-found: warn

      - name: Complete job
        run: echo "Done."
